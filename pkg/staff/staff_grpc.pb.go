// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: api/staff.proto

package staff

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StaffService_Get_FullMethodName            = "/staff.StaffService/Get"
	StaffService_Create_FullMethodName         = "/staff.StaffService/Create"
	StaffService_Update_FullMethodName         = "/staff.StaffService/Update"
	StaffService_Delete_FullMethodName         = "/staff.StaffService/Delete"
	StaffService_List_FullMethodName           = "/staff.StaffService/List"
	StaffService_Login_FullMethodName          = "/staff.StaffService/Login"
	StaffService_RefreshToken_FullMethodName   = "/staff.StaffService/RefreshToken"
	StaffService_Logout_FullMethodName         = "/staff.StaffService/Logout"
	StaffService_CheckAuth_FullMethodName      = "/staff.StaffService/CheckAuth"
	StaffService_ChangePassword_FullMethodName = "/staff.StaffService/ChangePassword"
)

// StaffServiceClient is the client API for StaffService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Комбинированный сервис для управления персоналом и авторизацией
type StaffServiceClient interface {
	// Получение информации о сотруднике по ID
	Get(ctx context.Context, in *GetIn, opts ...grpc.CallOption) (*GetOut, error)
	// Создание нового сотрудника
	Create(ctx context.Context, in *CreateIn, opts ...grpc.CallOption) (*CreateOut, error)
	// Обновление информации о сотруднике
	Update(ctx context.Context, in *UpdateIn, opts ...grpc.CallOption) (*UpdateOut, error)
	// Удаление сотрудника
	Delete(ctx context.Context, in *DeleteIn, opts ...grpc.CallOption) (*DeleteOut, error)
	// Получение списка сотрудников с фильтрацией и пагинацией
	List(ctx context.Context, in *ListIn, opts ...grpc.CallOption) (*ListOut, error)
	// Авторизация сотрудника по логину и паролю
	Login(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*LoginOut, error)
	// Обновление токена сессии
	RefreshToken(ctx context.Context, in *RefreshTokenIn, opts ...grpc.CallOption) (*RefreshTokenOut, error)
	// Выход из системы и завершение сессии
	Logout(ctx context.Context, in *LogoutIn, opts ...grpc.CallOption) (*LogoutOut, error)
	// Проверка текущего статуса авторизации
	CheckAuth(ctx context.Context, in *CheckAuthIn, opts ...grpc.CallOption) (*CheckAuthOut, error)
	// Изменение пароля авторизованного пользователя
	ChangePassword(ctx context.Context, in *ChangePasswordIn, opts ...grpc.CallOption) (*ChangePasswordOut, error)
}

type staffServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceClient(cc grpc.ClientConnInterface) StaffServiceClient {
	return &staffServiceClient{cc}
}

func (c *staffServiceClient) Get(ctx context.Context, in *GetIn, opts ...grpc.CallOption) (*GetOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOut)
	err := c.cc.Invoke(ctx, StaffService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) Create(ctx context.Context, in *CreateIn, opts ...grpc.CallOption) (*CreateOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateOut)
	err := c.cc.Invoke(ctx, StaffService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) Update(ctx context.Context, in *UpdateIn, opts ...grpc.CallOption) (*UpdateOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOut)
	err := c.cc.Invoke(ctx, StaffService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) Delete(ctx context.Context, in *DeleteIn, opts ...grpc.CallOption) (*DeleteOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteOut)
	err := c.cc.Invoke(ctx, StaffService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) List(ctx context.Context, in *ListIn, opts ...grpc.CallOption) (*ListOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOut)
	err := c.cc.Invoke(ctx, StaffService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) Login(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*LoginOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginOut)
	err := c.cc.Invoke(ctx, StaffService_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) RefreshToken(ctx context.Context, in *RefreshTokenIn, opts ...grpc.CallOption) (*RefreshTokenOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefreshTokenOut)
	err := c.cc.Invoke(ctx, StaffService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) Logout(ctx context.Context, in *LogoutIn, opts ...grpc.CallOption) (*LogoutOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogoutOut)
	err := c.cc.Invoke(ctx, StaffService_Logout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) CheckAuth(ctx context.Context, in *CheckAuthIn, opts ...grpc.CallOption) (*CheckAuthOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckAuthOut)
	err := c.cc.Invoke(ctx, StaffService_CheckAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordIn, opts ...grpc.CallOption) (*ChangePasswordOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangePasswordOut)
	err := c.cc.Invoke(ctx, StaffService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceServer is the server API for StaffService service.
// All implementations must embed UnimplementedStaffServiceServer
// for forward compatibility.
//
// Комбинированный сервис для управления персоналом и авторизацией
type StaffServiceServer interface {
	// Получение информации о сотруднике по ID
	Get(context.Context, *GetIn) (*GetOut, error)
	// Создание нового сотрудника
	Create(context.Context, *CreateIn) (*CreateOut, error)
	// Обновление информации о сотруднике
	Update(context.Context, *UpdateIn) (*UpdateOut, error)
	// Удаление сотрудника
	Delete(context.Context, *DeleteIn) (*DeleteOut, error)
	// Получение списка сотрудников с фильтрацией и пагинацией
	List(context.Context, *ListIn) (*ListOut, error)
	// Авторизация сотрудника по логину и паролю
	Login(context.Context, *LoginIn) (*LoginOut, error)
	// Обновление токена сессии
	RefreshToken(context.Context, *RefreshTokenIn) (*RefreshTokenOut, error)
	// Выход из системы и завершение сессии
	Logout(context.Context, *LogoutIn) (*LogoutOut, error)
	// Проверка текущего статуса авторизации
	CheckAuth(context.Context, *CheckAuthIn) (*CheckAuthOut, error)
	// Изменение пароля авторизованного пользователя
	ChangePassword(context.Context, *ChangePasswordIn) (*ChangePasswordOut, error)
	mustEmbedUnimplementedStaffServiceServer()
}

// UnimplementedStaffServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStaffServiceServer struct{}

func (UnimplementedStaffServiceServer) Get(context.Context, *GetIn) (*GetOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStaffServiceServer) Create(context.Context, *CreateIn) (*CreateOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStaffServiceServer) Update(context.Context, *UpdateIn) (*UpdateOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStaffServiceServer) Delete(context.Context, *DeleteIn) (*DeleteOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStaffServiceServer) List(context.Context, *ListIn) (*ListOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStaffServiceServer) Login(context.Context, *LoginIn) (*LoginOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedStaffServiceServer) RefreshToken(context.Context, *RefreshTokenIn) (*RefreshTokenOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedStaffServiceServer) Logout(context.Context, *LogoutIn) (*LogoutOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedStaffServiceServer) CheckAuth(context.Context, *CheckAuthIn) (*CheckAuthOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (UnimplementedStaffServiceServer) ChangePassword(context.Context, *ChangePasswordIn) (*ChangePasswordOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedStaffServiceServer) mustEmbedUnimplementedStaffServiceServer() {}
func (UnimplementedStaffServiceServer) testEmbeddedByValue()                      {}

// UnsafeStaffServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceServer will
// result in compilation errors.
type UnsafeStaffServiceServer interface {
	mustEmbedUnimplementedStaffServiceServer()
}

func RegisterStaffServiceServer(s grpc.ServiceRegistrar, srv StaffServiceServer) {
	// If the following call pancis, it indicates UnimplementedStaffServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StaffService_ServiceDesc, srv)
}

func _StaffService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).Get(ctx, req.(*GetIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).Create(ctx, req.(*CreateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).Update(ctx, req.(*UpdateIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).Delete(ctx, req.(*DeleteIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).List(ctx, req.(*ListIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).Login(ctx, req.(*LoginIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).RefreshToken(ctx, req.(*RefreshTokenIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_Logout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).Logout(ctx, req.(*LogoutIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_CheckAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAuthIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).CheckAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_CheckAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).CheckAuth(ctx, req.(*CheckAuthIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StaffService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceServer).ChangePassword(ctx, req.(*ChangePasswordIn))
	}
	return interceptor(ctx, in, info, handler)
}

// StaffService_ServiceDesc is the grpc.ServiceDesc for StaffService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StaffService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staff.StaffService",
	HandlerType: (*StaffServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _StaffService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StaffService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StaffService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StaffService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StaffService_List_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _StaffService_Login_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _StaffService_RefreshToken_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _StaffService_Logout_Handler,
		},
		{
			MethodName: "CheckAuth",
			Handler:    _StaffService_CheckAuth_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _StaffService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/staff.proto",
}
